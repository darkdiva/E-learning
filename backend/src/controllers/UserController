import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { User, UserModel } from 'c:/Users/mhadh/OneDrive/Bureau/pfe/backend/backend/src/models/user';

class UserController {
  public async signUp(req: Request, res: Response): Promise<void> {
    try {
      const { fullName, email, password, phoneNumber, country, dateOfBirth } = req.body;

      // Check if user already exists
      const existingUser = await UserModel.findOne({ email });
      if (existingUser) {
        res.status(400).json({ error: 'User already exists' });
        return;
      }
// Hash password
const saltRounds = 10;
const hashedPassword = await bcrypt.hash(password, saltRounds);

// Create new user
const  user  = {fullName: req.body.fullName, email: req.body.email, password: hashedPassword,phoneNumber:req.body.phoneNumber, country:req.body.country, dateOfBirth: req.body.dateOfBirth };
const newUser = new UserModel(user);
await newUser.save();

// Generate token
const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET!, { expiresIn: '7d' });

// Return success response with token
res.status(201).json({ token });
} catch (error) {
console.error(error);
res.status(500).json({ error: 'Internal server error' });
}
}
public async signIn(req: Request, res: Response): Promise<void> {
  try {
    const { email, password } = req.body;

    // Check if user exists
    const user = await UserModel.findOne({ email });
    if (!user) {
      res.status(401).json({ error: 'Invalid email or password' });
      return;
    }

    // Check if password is correct
    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      res.status(401).json({ error: 'Invalid email or password' });
      return;
    }

    // Generate token
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET!, { expiresIn: '7d' });
// Return success response with token
res.status(200).json({ token });
} catch (error) {
  console.error(error);
  res.status(500).json({ error: 'Internal server error' });
}
}
}

export default UserController;